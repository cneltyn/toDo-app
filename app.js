!function(){"use strict";function o(o,t){t.otherwise("/todos"),o.state("todos",{url:"/todos",template:'<todos todos="$resolve.todos"></todos>',resolve:{todos:["ToDoService",function(o){return o.getTodos()}]}}).state("todos.create",{url:"/create",template:'<create todos="$resolve.todos"></create>',resolve:{todos:["ToDoService",function(o){return o.getTodos()}]}}).state("todos.edit",{url:"/edit/:id",template:"<edit todo=$resolve.todo></edit>",resolve:{todo:["$stateParams","ToDoService",function(o,t){return t.find(o.id)}]}})}o.$inject=["$stateProvider","$urlRouterProvider"],angular.module("todoApp",["ui.router","todoApp.components","todoApp.services","ngMaterial"]).config(o)}(),function(){"use strict";angular.module("todoApp.components",[])}(),function(){"use strict";angular.module("todoApp.services",[])}(),function(){"use strict";function o(){var o=this;o.appTitle="Do or do not, there is no try",o.saved=localStorage.getItem("todos"),o.todos=null!==localStorage.getItem("todos")?JSON.parse(o.saved):[{id:0,text:"Learn AngularJS",done:!1},{id:1,text:"Build an Angular app",done:!1}],localStorage.setItem("todos",JSON.stringify(o.todos)),o.getTodos=function(){return o.todos},o.find=function(t){var e=o.todos.filter(function(o){return o.id===parseInt(t,10)});return e&&e[0]||null},o.getById=function(t){var e=o.todos.map(function(o){return o.id}).indexOf(t);return e!==-1&&e},o.getUnDo=function(){return o.todos=o.todos.filter(function(o){return o.done!==!0}),o.todos},o.remaining=function(){var t=0;return angular.forEach(o.todos,function(o){t+=o.done?0:1}),t},o.archive=function(){localStorage.setItem("todos",JSON.stringify(o.getUnDo()))},o.removeTodo=function(t){o.todos.splice(o.getById(t),1),localStorage.setItem("todos",JSON.stringify(o.todos))},o.addTodo=function(t){var e=null;e=o.todos.length>0?o.todos[o.todos.length-1].id:-1,o.todos.push({id:e+=1,text:t,done:!1}),localStorage.setItem("todos",JSON.stringify(o.todos))},o.editTodo=function(){localStorage.setItem("todos",JSON.stringify(o.todos))}}angular.module("todoApp.services").service("ToDoService",o)}(),function(){"use strict";function o(){function o(o,t,e,n){function r(o){n.$setViewValue(o.target.result),n.$render()}function d(o){var t=new FileReader;null!==o&&o.preventDefault(),t.onload=r,t.readAsText(o.dataTransfer.files[0])}var i;i=function(o){return null!==o&&o.preventDefault(),o.dataTransfer.effectAllowed="copy",!1},t.bind("dragover",i),t.bind("dragenter",i),t.bind("drop",d)}return{restrict:"EA",require:"ngModel",link:o}}angular.module("todoApp.components").directive("drag",o)}(),function(){"use strict";function o(o,t){var e=this;e.addTodo=function(){t.addTodo(e.todoText),o.go("todos")}}o.$inject=["$state","ToDoService"],angular.module("todoApp.components").component("create",{bindings:{todos:"<"},templateUrl:"components/create/todo-create.html",controller:o})}(),function(){"use strict";function o(o,t){var e=this;e.editTodo=function(){t.editTodo(),o.go("todos")}}o.$inject=["$state","ToDoService"],angular.module("todoApp.components").component("edit",{bindings:{todo:"<"},templateUrl:"components/edit/todo-edit.html",controller:o})}(),function(){"use strict";function o(){var o=this;o.date=Date.now()}angular.module("todoApp.components").component("footer",{templateUrl:"components/footer/footer.html",controller:o})}(),function(){"use strict";function o(o){var t=this;t.appTitle=o.appTitle,t.removeTodo=function(t){o.removeTodo(t)},t.remaining=function(){return o.remaining()},t.archive=function(){o.archive(),t.todos=o.getTodos()}}o.$inject=["ToDoService"],angular.module("todoApp.components").component("todos",{bindings:{todos:"<"},templateUrl:"components/list/todo-list.html",controller:o})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
